// probClaferExample.cfr
// Author: Jordan A. Ross
// Date: 1/26/2015
// Last updated: 2/2/2015
//
// This is just an example for prototypying a Clafer model for reliability analysis. We
// consider the following example taken from Figure 4.14 in "Reliability Engineering and Risk
// Analysis" by Mohammad Modarres, Mark Kaminskiy, Vasiliy Krivtsov
// 
// Structural model::
//                    ---
//            |----->| A |------->|
//   ---      |       ---         |        ---
//  | X | ----|       ---         |------>| Y |
//   ---      |----->| B |------->|        ---
//            |       ---         |
//            |    ---     ---    |
//            |-->| C |-->| D |-->|
//                 ---     ---
//
// Assume that blocks A, B, C, and D all have a basic event "InternalFailure" but we denote it
// as the block letter in the fault tree (i.e. "InternalFailure of A" will just be "A"). In this
// example we are interested in seeing if we send data from X (not including in the reliablilty
// analysis) what is the probability that the data will be read at Y (also not included in the
// analysis). Thus, we are really just interested in the probability that the subsystem made up
// of components A, B, C, and D fails.
// 
// Let us denote the top event as Y which is the event that our subsystem (A, B, C, D) fails.
//
// The fault tree then would look as follows:
//                   ---
//                  | Y |
//                   ---
//                    ^
//                    |
//                  (AND)
//                    ^
//        |------|----|----------|
//       ---    ---             (OR)
//      | A |  | B |             |
//       ---    ---        |------------|
//                        ---          ---
//                       | C |        | D |
//                        ---          ---
//
// Now, let us assume that the basic events of A, B, C, D have the following probabilities:
// P(A) = 0.1
// P(B) = 0.1
// P(C) = 0.1
// P(D) = 0.2
//
// We can find the probability of C or D failing using the formula for the OR Gate.
// Note that the probability at the OR gate is given by the following formula if x,y,z are
// independent but not mutually exclusive events (Eq 2.15):
// P_OR(x,y,z) = P(x) + P(y) + P(z) - P(x,y,z)
// Thus,
// P_OR(C,D) = P(C)+P(D)-P(C)*P(D) = 0.28
// 
// We can find the probability of T then by using the previous result in our AND Gate.
// Note that the probability at the AND gate is given by the following formula if x,y,z are
// independent events (Eq 2.13):
// P_AND(x,y,z) = P(x)*P(y)*P(z)
// Thus,
// P(Y) = P_AND(A,B,P_OR(C,D)) = 0.1*0.1*0.28 = 0.0028
//

// I am first defining some abstract Clafers that will represent structural elements in my model
// and possibly other models. To represent the block diagram given above we need a general
// component Clafer that can connect any number of inputs and outputs. We also give some special
// types of components in which there is only outputs or only inputs.
abstract Component
    inputs -> Component *
        [parent in this.outputs] // We use this constaint to say that when we put a component
                                // in our input list, also put us in that components output list. 
    outputs -> Component *
        [parent in this.inputs] // We use this constaint to say that when we put a component
                               // in our output list, also put us in that components input list.

abstract SourceComponent : Component
    [no inputs]

abstract SinkComponent : Component
    [no outputs]

// Before I define some abstract Clafers to represent probabilities I create an abstract Clafer
// to denote a rational number for our probabilities. We introduce this because current Clafer
// only supports integer numbers and probability values are always less than 1.
abstract Rational
    numerator  ->> integer
    denominator ->> integer

// I then  define the probability to be a rational number with some constraints on the rational
// number to conform to the axioms of probability.
abstract Probability : Rational
    [numerator <= denominator]
    [numerator >= 0 && denominator > 0]

// We then have the notion of a basic event which represents some event that can contribute to
// the failure of a component. This basic event is simply a probability measure.
abstract BasicEvent : Probability

// The abstract Clafer for failure expression represents an boolean expression between 2
// probabilities which results in a probability. The FailureExpression clafer is refined
// in the following abstract Clafers to denote boolean operations.
abstract FailureExpression : Probability
    operand1 -> Probability
    operand2 -> Probability ?

// The failure expression for an AND boolean expression.
abstract AND : FailureExpression
    [operand2]
    // need refs
    tempNumerator ->> integer = operand1.numerator*operand2.numerator
    tempDenominator ->> integer = operand1.denominator*operand2.denominator
    [this.numerator = tempNumerator]
    [this.denominator = tempDenominator]

// The failure expression for an OR boolean expression
abstract OR : FailureExpression
    [operand2]
    // The following expression results in a Choco Error. Comment out lines 123-125 to test
    //tempNumerator ->> integer = operand1.numerator * operand2.denominator + operand2.numerator * operand1.denominator - operand1.numerator * operand2.numerator
    tempExp ->> integer = (operand1.numerator*operand2.denominator)
    tempExp2 ->> integer = (operand2.numerator*operand1.denominator)
    tempNumerator ->> integer = tempExp+tempExp2 - (operand1.numerator*operand2.numerator)
    tempDenominator ->> integer = operand1.denominator * operand2.denominator
    [this.denominator = tempDenominator]
    [this.numerator = tempNumerator]

// This failure expression is used to copy a single basic event that will cause a failure. We
// do this because we don't want to reference basic events of other components we only want to
// reference their result of a failure expression.
abstract NOP : FailureExpression
    [no operand2]
    tempNumerator ->> integer = operand1.numerator
    tempDenominator ->> integer = operand1.denominator
    [this.numerator = tempNumerator]
    [this.denominator = tempDenominator]


// Next the system level Clafer is defined (i.e. the Clafer that contains the entire structural
// model). We will call this system "SimpleSystem"
SimpleSystem
    // In this simple system we have a total of 6 component. We first define the components that
    // we will have then we will provide details for the components after
    systemComponents -> Component 6
    [systemComponents = compX, compA, compB, compC, compD, compY]

    // Now for each of the components in our simple system we will define the properties for
    // each of the individual components. For each component we will define the connections it
    // makes. Think of the connections as 
    compX : SourceComponent
        [outputs = (compA, compB, compC)]
    // For components A, B, C, and D we will not just have structural information but also
    // basic events and failure probabilities.
    compA : Component
        // We first define our outputs of the component but don't worry about inputs since our
        // constraint in the Component Clafer will take care of that.
        [outputs = (compY)]
        internalFailure : BasicEvent
            [numerator = 1 && denominator = 10]
        // For the failure expression we only have the internal failure of component A. Thus we
        // define the NOP failure expression with a single operand.
        failure : NOP
        [failure.operand1 = this.internalFailure]
    compB : Component
        [outputs = (compY)]
        internalFailure : BasicEvent
            [numerator = 1 && denominator = 10]
        failure : NOP
        [failure.operand1 = this.internalFailure]
    compC : Component
        [outputs = (compD)]
        internalFailure : BasicEvent
            [numerator = 1 && denominator = 10]
        failure : NOP
        [failure.operand1 = this.internalFailure]
        
    compD : Component
        [outputs = (compY)]
        internalFailure : BasicEvent
            [numerator = 2 && denominator = 10]
        // Here we actually do perform a boolean operation on two operands.
        failure : OR
        [failure.operand1 = this.internalFailure]
        [failure.operand2 = compC.failure]
        
    compY : SinkComponent
        // We have to split up the expression into 2 expressions since we only defined the
        // failure expression to take two operands.
        intermediate : AND
        [intermediate.operand1 = compA.failure]
        [intermediate.operand2 = compB.failure]
        failure : AND
        [failure.operand1 = this.intermediate]
        [failure.operand2 = compD.failure]

// Potential addition to Clafer:
// -----------------------------
//
// One potential addition that would simplify the model immensely is a product operation on a
// set similiar to sum.
// Example:
// myBag->> integer * = (1, 2, 3, 4, 5)
// bagProduct ->> integer = [product myBag] // 1*2*3*4*5 = 120
//
// This addition would allow us to calcualte the probability of a boolean expression on a 
// set (of arbitrary length) of operands.
