/////////////////////////////////////////////////////////////////////////////////////////////////////////////////
// This model is based off of the model given in the following article:
// M.Zeller, C.Prehofer, Modeling and effiecient solving of extra-functional properties for adaptation in
// networked embedded real-time systems, J. Syst Architect. (2012), http://dx.doi.org/10.1016/j.sysarc.2012.11.003
//
// The Clafer implentation of the model was completed by:
// Jordan A. Ross
// 
// The Clafer implementation follows the model given in the paper closely except for the following exceptions:
// 1. EDF Scheduling is used - only periods of 10 are allowed for a task.
// 2. There is no real number system so everything is scaled to integers.
// 3. WCTD is not modeled accurately.
//
// Date created: 14/10/2014
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// ---------------------- Meta-Model (Abstract Clafer) ---------------------------------------- //


abstract NetworkedDevice
  bitrate ->> integer // The bitrate at which the network device sends messages over the bus (bit/s)
  connectedTo -> CANBus // The bus which the device is physically linked to.
    [parent in this.connectedFrom]

abstract CANBus
  bandwidth ->> integer // The maximum bandwidth that the bus can hold at one time.
  connectedFrom -> NetworkedDevice * // The networked devices connected to bus
    [this.connectedTo = parent]


abstract ECU : NetworkedDevice
  capacity ->> integer  // The size of the memory of the ECU
  deployedFrom -> Function *  // Which functions are running on the ECU
    [this.deployedTo = parent] // C1

abstract Function
  size ->> integer   // The worst case amount of memory that the function could use.
  bitrate->> integer // The bitrate at which the function sends messages over the bus
  wcet ->> integer   // The worst case exectuion time of the function. Caution here because this is associated with the ECU it is assigned
    [wcet > 0]       // We want to only constrain the worst case execution time by being non-neg
  deadline ->> integer // The deadline of the software function
    [deadline > 0]
  period ->> integer // The period of the software function
    [period > 0]
  deployedTo -> ECU  // What ECU the function is deployed to.
    [parent in this.deployedFrom]// C2
  connectedTo -> CANBus
    // We use this to store the CAN bus we are connected to is the same as the ECU we are deployed on.
    [connectedTo.ref = deployedTo.connectedTo.ref] 

abstract SWToSWDataFlow
  sw_sender -> Function // Denotes the function that is transmitting the message
  sw_reciever -> Function // Denotes the function that is receiving the message
  // wctd ->> integer
  // This constraint says: If the sender and reciever are deployed on the same ECU then set the
  // WCTD of the dataflow to 0. Otherwise set it to 100.
  // [wctd = if (sw_sender.deployedTo.ref != sw_reciever.deployedTo.ref) then 100 else 0]
  // // // Formulas from CAN schedulability analysis paper -- Clafer borke -- Not enough heap space
  num_data_bytes ->> integer // The number of bytes that needs to be sent
  bitrate ->> integer // The transmission rate of bits per second
  xor identifier
    bit_id_11// (55+10*num_data_bytes)/bitrate
    bit_id_29// (80+10*num_data_bytes)/bitrate
  wctd ->> integer
  [wctd = if ((bit_id_11) && (sw_sender.deployedTo.ref != sw_reciever.deployedTo.ref))
    then ((55+10*num_data_bytes)/bitrate) 
    else (if ((bit_id_29) && (sw_sender.deployedTo.ref != sw_reciever.deployedTo.ref))
      then ((80+10*num_data_bytes)/bitrate)
      else 0)]
  reqGateBandwidth ->> integer
  // We only need gateway bandwidth if our two sofware functions are not connected to the same bus.
  [reqGateBandwidth = if (sw_sender.connectedTo.ref != sw_reciever.connectedTo.ref) then bitrate else 0]


abstract SensorToSWDataFlow
  sensor_sender -> NetworkedDevice // Denotes the sensor that is transmitting the message
  sw_reciever -> Function // Denotes the function that is receiving the message
  // wctd ->> integer
  // [wctd = 100]
  // // Formulas from CAN schedulability analysis paper -- Clafer borke -- Not enough heap space
  num_data_bytes ->> integer // The number of bytes that needs to be sent
  bitrate ->> integer // The transmission rate of bits per second
  xor identifier
    bit_id_11// (55+10*num_data_bytes)/bitrate
    bit_id_29// (80+10*num_data_bytes)/bitrate
  wctd ->> integer
    [wctd = if (bit_id_11)
      then ((55+10*num_data_bytes)/bitrate) 
      else (if (bit_id_29)
        then ((80+10*num_data_bytes)/bitrate)
        else 0)]
  reqGateBandwidth ->> integer
  // We only need gateway bandwidth if our sensor and software function are not connected to the same bus.
  [reqGateBandwidth = if (sensor_sender.connectedTo.ref != sw_reciever.connectedTo.ref) then bitrate else 0]


abstract SWToActuatorDataFlow
  sw_sender -> Function // Denotes the function that is transmitting the message
  acutator_receiver -> NetworkedDevice // Denotes the actutator that is receiving the message
  // wctd ->> integer
  // [wctd = 100]
  // // Formulas from CAN schedulability analysis paper -- Clafer borke -- Not enough heap space
  num_data_bytes ->> integer // The number of bytes that needs to be sent
  bitrate ->> integer // The transmission rate of bits per second
  xor identifier
    bit_id_11// (55+10*num_data_bytes)/bitrate
    bit_id_29// (80+10*num_data_bytes)/bitrate
  wctd ->> integer
    [wctd = if (bit_id_11)
      then ((55+10*num_data_bytes)/bitrate) 
      else (if (bit_id_29)
        then ((80+10*num_data_bytes)/bitrate)
        else 0)]
  reqGateBandwidth ->> integer
  // We only need gateway bandwidth if our actuator and software function are not connected to the same bus.
  [reqGateBandwidth = if (sw_sender.connectedTo.ref != acutator_receiver.connectedTo.ref) then bitrate else 0]

// ------------------------ Keyless Entry System Model -------------------------------------------------//

// Set of ECU's
p1 : ECU
  [capacity = 128]
  [bitrate = sum deployedFrom.bitrate]
  [connectedTo = can1]
p2 : ECU
  [capacity = 128]
  [bitrate = sum deployedFrom.bitrate]
  [connectedTo = can1]
p3 : ECU
  [capacity = 256]
  [bitrate = sum deployedFrom.bitrate]
  [connectedTo = can2]
p4 : ECU
  [capacity = 128]
  [bitrate = sum deployedFrom.bitrate]
  [connectedTo = can2]

// Set of software functions
sw1 : Function
  // dataflow_sw1_sw2 : SWToSWDataFlow
  //   [sw_sender = sw1]
  //   [sw_reciever = sw2]
  //   [bitrate = 80]
  dataflow_sw1_sw2 : SWToSWDataFlow
    [sw_sender = sw1]
    [sw_reciever = sw2]
    [num_data_bytes = 100]
    [bitrate = 10]
    [bit_id_29]
  [size = 64]
  [bitrate = 80]
  [deployedTo = p1]
  [deadline = 25]
  [period = 25]
sw2 : Function
  // dataflow_sw2_sw3 : SWToSWDataFlow
  //   [sw_sender = sw2]
  //   [sw_reciever = sw3]
  //   [bitrate = 10]
  dataflow_sw2_sw3 : SWToSWDataFlow
    [sw_sender = sw2]
    [sw_reciever = sw3]
    [num_data_bytes = 100]
    [bitrate = 10]
    [bit_id_11]
  dataflow_sw2_a1 : SWToActuatorDataFlow
    [sw_sender = sw2]
    [acutator_receiver = doorLock1]
    [bitrate = 10]
    [num_data_bytes = 100]
    [bitrate = 10]
    [bit_id_11]
  dataflow_sw2_a2 : SWToActuatorDataFlow
    [sw_sender = sw2]
    [acutator_receiver = doorLock2]
    [bitrate = 10]
    [num_data_bytes = 100]
    [bitrate = 10]
    [bit_id_11]
  dataflow_sw2_a3 : SWToActuatorDataFlow
    [sw_sender = sw2]
    [acutator_receiver = doorLock3]
    [bitrate = 10]
    [num_data_bytes = 100]
    [bitrate = 10]
    [bit_id_11]
  dataflow_sw2_a4 : SWToActuatorDataFlow
    [sw_sender = sw2]
    [acutator_receiver = doorLock4]
    [bitrate = 10]
    [num_data_bytes = 100]
    [bitrate = 10]
    [bit_id_11]
  [size = 128]
  [bitrate = 50] // We add all the bit rates out of s2 in Figure 2.
  [(deployedTo = p2) || (deployedTo = p3)]
  [deadline = 10]
  [period = 10]
sw3 : Function
  // dataflow_sw3_sw4 : SWToSWDataFlow
  //   [sw_sender = sw3]
  //   [sw_reciever = sw4]
  //   [bitrate = 160]
  // dataflow_sw3_sw5 : SWToSWDataFlow
  //   [sw_sender = sw3]
  //   [sw_reciever = sw5]
  //   [bitrate = 160]
  dataflow_sw3_sw4 : SWToSWDataFlow
    [sw_sender = sw3]
    [sw_reciever = sw4]
    [num_data_bytes = 100]
    [bitrate = 10]
    [bit_id_29]
  dataflow_sw3_sw5 : SWToSWDataFlow
    [sw_sender = sw3]
    [sw_reciever = sw5]
    [num_data_bytes = 100]
    [bitrate = 10]
    [bit_id_29]
  [size = 64]
  [bitrate = 320] // We add all the bit rates out of s3 in Figure 2.
  [deadline = 25]
  [period = 25]
sw4 : Function
  dataflow_sw4_a5 : SWToActuatorDataFlow
    [sw_sender = sw4]
    [acutator_receiver = lightUnit1]
    [num_data_bytes = 100]
    [bitrate = 100]
    [bit_id_11]
  dataflow_sw4_a6 : SWToActuatorDataFlow
    [sw_sender = sw4]
    [acutator_receiver = lightUnit2]
    [num_data_bytes = 100]
    [bitrate = 100]
    [bit_id_11]
  [size = 32]
  [bitrate = 200] // We add all the bit rates out of s4 in Figure 2.
  [deadline = 10]
  [period = 10]
sw5 : Function
  dataflow_sw5_a7 : SWToActuatorDataFlow
    [sw_sender = sw5]
    [acutator_receiver = lightUnit3]
    [num_data_bytes = 100]
    [bitrate = 100]
    [bit_id_11]
  dataflow_sw5_a8 : SWToActuatorDataFlow
    [sw_sender = sw5]
    [acutator_receiver = lightUnit4]
    [num_data_bytes = 100]
    [bitrate = 100]
    [bit_id_11]
  [size = 32]
  [bitrate = 200] // We add all the bit rates out of s5 in Figure 2.
  [deadline = 10]
  [period = 10]

// Set of CAN busses
can1 : CANBus
  [bandwidth = 125000]
can2 : CANBus
  [bandwidth = 125000]


// Set of Sensors
antenna1 : NetworkedDevice
  dataflow_s1_sw1 : SensorToSWDataFlow
    [sensor_sender = antenna1]
    [sw_reciever = sw1]
    [bitrate = 80]
    [num_data_bytes = 0]
    [bit_id_11]
  [bitrate = 80]
  [connectedTo = can2]
antenna2 : NetworkedDevice
  dataflow_s2_sw1 : SensorToSWDataFlow
    [sensor_sender = antenna2]
    [sw_reciever = sw1]
    [bitrate = 80]
    [num_data_bytes = 0]
    [bit_id_11]
  [bitrate = 80]
  [connectedTo = can2]
antenna3 : NetworkedDevice
  dataflow_s3_sw1 : SensorToSWDataFlow
    [sensor_sender = antenna3]
    [sw_reciever = sw1]
    [bitrate = 80]
    [num_data_bytes = 0]
    [bit_id_11]
  [bitrate = 80]
  [connectedTo = can2]

// Set of actuators
doorLock1 : NetworkedDevice
  [bitrate = 0]
  [connectedTo = can2]
doorLock2 : NetworkedDevice
  [bitrate = 0]
  [connectedTo = can2]
doorLock3 : NetworkedDevice
  [bitrate = 0]
  [connectedTo = can2]
doorLock4 : NetworkedDevice
  [bitrate = 0]
  [connectedTo = can2]
lightUnit1 : NetworkedDevice
  [bitrate = 0]
  [connectedTo = can1]
lightUnit2 : NetworkedDevice
  [bitrate = 0]
  [connectedTo = can1]
lightUnit3 : NetworkedDevice
  [bitrate = 0]
  [connectedTo = can1]
lightUnit4 : NetworkedDevice
  [bitrate = 0]
  [connectedTo = can1]

// Resource allocation contraints -- Satisfying eq 7 in Zeller paper
sizeOfCodeOnP1 ->> integer = sum p1.deployedFrom.size
[sizeOfCodeOnP1 <= p1.capacity]

sizeOfCodeOnP2 ->> integer = sum p2.deployedFrom.size
[sizeOfCodeOnP2 <= p2.capacity]

sizeOfCodeOnP3 ->> integer = sum p3.deployedFrom.size
[sizeOfCodeOnP3 <= p3.capacity]

sizeOfCodeOnP4 ->> integer = sum p4.deployedFrom.size
[sizeOfCodeOnP4 <= p4.capacity]

// In-vehicle network contraints -- Satifying eq 12 in Zeller paper
sumBitRatesOnCan1 ->> integer = sum can1.connectedFrom.bitrate
[sumBitRatesOnCan1 <= can1.bandwidth]
sumBitRatesOnCan2 ->> integer = sum can2.connectedFrom.bitrate
[sumBitRatesOnCan2 <= can2.bandwidth]

// Toplogy constraint
sumReqGatewayBandwidth ->> integer = dataflow_s1_sw1.reqGateBandwidth + dataflow_s2_sw1.reqGateBandwidth + dataflow_s3_sw1.reqGateBandwidth + dataflow_sw1_sw2.reqGateBandwidth + dataflow_sw2_a1.reqGateBandwidth + dataflow_sw2_a2.reqGateBandwidth + dataflow_sw2_a3.reqGateBandwidth + dataflow_sw2_a4.reqGateBandwidth + dataflow_sw2_sw3.reqGateBandwidth + dataflow_sw3_sw4.reqGateBandwidth + dataflow_sw3_sw5.reqGateBandwidth + dataflow_sw4_a5.reqGateBandwidth + dataflow_sw4_a6.reqGateBandwidth + dataflow_sw5_a7.reqGateBandwidth + dataflow_sw5_a8.reqGateBandwidth
[sumReqGatewayBandwidth <= 250000]
// Contraints for EDF scheduling
// Assuming all deadlines are 10 until we can implement divide on real numbers
sumWCETOnP1 ->> integer = sum p1.deployedFrom.wcet
[sumWCETOnP1 <= 10]
sumWCETOnP2 ->> integer = sum p2.deployedFrom.wcet
[sumWCETOnP2 <= 10]
sumWCETOnP3 ->> integer = sum p3.deployedFrom.wcet
[sumWCETOnP3 <= 10]
sumWCETOnP4 ->> integer = sum p4.deployedFrom.wcet
[sumWCETOnP4 <= 10]

// End to end latency for sensor 1 to acutator 8
// The path it takes is:
//    sensor1 --> s1 --> s2 --> s3 --> s5 --> actuator8
TC1_8 ->> integer = antenna1.dataflow_s1_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_sw3.wctd + sw3.wcet + sw3.period + sw3.dataflow_sw3_sw5.wctd + sw5.wcet + sw5.period +sw5.dataflow_sw5_a8.wctd
// The other contraints TCX_Y means from sensorX to acutatorY
TC1_7 ->> integer = antenna1.dataflow_s1_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_sw3.wctd + sw3.wcet + sw3.period + sw3.dataflow_sw3_sw5.wctd + sw5.wcet + sw5.period +sw5.dataflow_sw5_a7.wctd
TC1_6 ->> integer = antenna1.dataflow_s1_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_sw3.wctd + sw3.wcet + sw3.period + sw3.dataflow_sw3_sw4.wctd + sw4.wcet + sw4.period +sw4.dataflow_sw4_a6.wctd
TC1_5 ->> integer = antenna1.dataflow_s1_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_sw3.wctd + sw3.wcet + sw3.period + sw3.dataflow_sw3_sw4.wctd + sw4.wcet + sw4.period +sw4.dataflow_sw4_a5.wctd
TC1_4 ->> integer = antenna1.dataflow_s1_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_a4.wctd
TC1_3 ->> integer = antenna1.dataflow_s1_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_a3.wctd
TC1_2 ->> integer = antenna1.dataflow_s1_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_a2.wctd
TC1_1 ->> integer = antenna1.dataflow_s1_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_a1.wctd

TC2_8 ->> integer = antenna2.dataflow_s2_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_sw3.wctd + sw3.wcet + sw3.period + sw3.dataflow_sw3_sw5.wctd + sw5.wcet + sw5.period +sw5.dataflow_sw5_a8.wctd
TC2_7 ->> integer = antenna2.dataflow_s2_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_sw3.wctd + sw3.wcet + sw3.period + sw3.dataflow_sw3_sw5.wctd + sw5.wcet + sw5.period +sw5.dataflow_sw5_a7.wctd
TC2_6 ->> integer = antenna2.dataflow_s2_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_sw3.wctd + sw3.wcet + sw3.period + sw3.dataflow_sw3_sw4.wctd + sw4.wcet + sw4.period +sw4.dataflow_sw4_a6.wctd
TC2_5 ->> integer = antenna2.dataflow_s2_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_sw3.wctd + sw3.wcet + sw3.period + sw3.dataflow_sw3_sw4.wctd + sw4.wcet + sw4.period +sw4.dataflow_sw4_a5.wctd
TC2_4 ->> integer = antenna2.dataflow_s2_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_a4.wctd
TC2_3 ->> integer = antenna2.dataflow_s2_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_a3.wctd
TC2_2 ->> integer = antenna2.dataflow_s2_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_a2.wctd
TC2_1 ->> integer = antenna2.dataflow_s2_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_a1.wctd


TC3_8 ->> integer = antenna3.dataflow_s3_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_sw3.wctd + sw3.wcet + sw3.period + sw3.dataflow_sw3_sw5.wctd + sw5.wcet + sw5.period +sw5.dataflow_sw5_a8.wctd
TC3_7 ->> integer = antenna3.dataflow_s3_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_sw3.wctd + sw3.wcet + sw3.period + sw3.dataflow_sw3_sw5.wctd + sw5.wcet + sw5.period +sw5.dataflow_sw5_a7.wctd
TC3_6 ->> integer = antenna3.dataflow_s3_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_sw3.wctd + sw3.wcet + sw3.period + sw3.dataflow_sw3_sw4.wctd + sw4.wcet + sw4.period +sw4.dataflow_sw4_a6.wctd
TC3_5 ->> integer = antenna3.dataflow_s3_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_sw3.wctd + sw3.wcet + sw3.period + sw3.dataflow_sw3_sw4.wctd + sw4.wcet + sw4.period +sw4.dataflow_sw4_a5.wctd
TC3_4 ->> integer = antenna3.dataflow_s3_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_a4.wctd
TC3_3 ->> integer = antenna3.dataflow_s3_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_a3.wctd
TC3_2 ->> integer = antenna3.dataflow_s3_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_a2.wctd
TC3_1 ->> integer = antenna3.dataflow_s3_sw1.wctd + sw1.period + sw1.wcet + sw1.dataflow_sw1_sw2.wctd + sw2.wcet + sw2.period + sw2.dataflow_sw2_a1.wctd

// Optimization Goals::
<< min TC1_8 >>
<< min TC1_7 >>
<< min TC1_6 >>
<< min TC1_5 >>
<< min TC1_4 >>
<< min TC1_3 >>
<< min TC1_2 >>
<< min TC1_1 >>
<< min TC2_8 >>
<< min TC2_7 >>
<< min TC2_6 >>
<< min TC2_5 >>
<< min TC2_4 >>
<< min TC2_3 >>
<< min TC2_2 >>
<< min TC2_1 >>
<< min TC3_8 >>
<< min TC3_7 >>
<< min TC3_6 >>
<< min TC3_5 >>
<< min TC3_4 >>
<< min TC3_3 >>
<< min TC3_2 >>
<< min TC3_1 >>
