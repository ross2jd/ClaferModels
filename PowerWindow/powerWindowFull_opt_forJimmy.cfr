// Power Window Clafer Model
// Based off of the slides developed by Krzysztof Czarnecki. Oringal Power Window
// Clafer done by Alexander Mushrukin.
//
// Model entered by: Jordan Ross
//
// Date: 2/3/15

// ------------------ ABSTRACT CLAFERS ------------------------------------------//
abstract SystemArchitecture
abstract FunctionalAnalysis
abstract FunctionalDesignArchitecture
abstract Hardware
abstract Device
abstract Feature
abstract Deployment
abstract DeviceTopology

// *************** Abstract Clafers for Functional Analysis *********************//
// I am defining this abstract Clafer because we have 2 functional analysis
// components (AnalysisFunction & FunctionalDevice) which need to be deployed to
// a device node.
abstract FunctionalAnalysisComponent
    deployedTo -> DeviceNode
        [parent in this.deployedFrom]

abstract AnalysisFunction : FunctionalAnalysisComponent

abstract FunctionalDevice : FunctionalAnalysisComponent

abstract Command
    sender -> FunctionalAnalysisComponent
    receiver -> FunctionalAnalysisComponent
// *******************************************************************************//

// ************ Abstract Clafers for Device Node Archiecture *********************//
abstract DeviceNode
    deployedFrom -> FunctionalAnalysisComponent *
        [this.deployedTo = parent]
    smart ?

// I define electrical unit as a special device node. It is one that is never smart and
// is used for providing/relaying power,signals, etc.
abstract ElectricalUnit : DeviceNode 
    [no smart]
    [no deployedFrom]

// Define a ECU which is a special type of device node
abstract ECU : DeviceNode
    [smart]

// Define an Electric Center which is a special type of device node (similiar to ElecticalUnit)
abstract ElectricCenter : DeviceNode
    [no smart]
    [no deployedFrom]

abstract Connection
    source -> DeviceNode
    sink -> DeviceNode
    

abstract Wire : Connection
    mass ->> integer    // wire mass (thickness*length)
    length ->> integer  // wire length
        [length > 0]
    [source.ref != sink.ref]

abstract LoadWire : Wire
    [mass = 7*length]
abstract DiscreteWire : Wire
    [mass = length]
abstract DevicePowerWire : Wire
    [mass = length]

// *****************************************************************************//


// Functional Architecture Analysis (Generic Window)
abstract WinSubSysFA : FunctionalAnalysis
    // Lets first define the components that we will have in our Functional Analysis Architecture
    WinSwitch : FunctionalDevice
    WinRqArbiter : AnalysisFunction
    WinController : AnalysisFunction
        xor config
            noExpress : Feature
            expressDown : Feature
            expressUpDown : Feature
    WinMotor : FunctionalDevice
    CurrentSensor : FunctionalDevice

    // Now lets define our commands
    localWinReq : Command
        [sender = WinSwitch && receiver = WinRqArbiter]
    winReq : Command
        [sender = WinRqArbiter && receiver = WinController]
    winCmd : Command
        [sender = WinController && receiver = WinMotor]
    current : Command
        [sender = CurrentSensor && receiver = WinController]

    // Let us define a sub system functional architecture for our pinch detection as follows:
    PinchDtcSubSysFA : FunctionalAnalysis ?
        // Lets define the components that we have in our pinch detection FA
        PinchDetection : AnalysisFunction
        PositionSensor : FunctionalDevice
        // Also define any commands that we have.
        object : Command
            [sender = PinchDetection && receiver = WinController]
        position : Command
            [sender = PositionSensor && receiver = PinchDetection]

    // We need a constraint to define when we have our pinch detection sub system FA
    [PinchDtcSubSysFA <=> pinchProtection] //TODO: This might not be the best place for this constraint.

// Device Nodes (Generic Window)
abstract WinSubSysDN : FunctionalDesignArchitecture
    // We define our components here for the device node architecture
    WinSwitch : DeviceNode
    BCM -> ECU ?
    WinMotor : DeviceNode
        Driver -> DeviceNode // The motor needs a DeviceNode to command the motor to operate
    
    //TODO: We need redefinition/nested inheritance to get rid of the in and out's
    // The door inline represents the plug/socket interface between two wiring harnesses.
    DoorInline : ElectricalUnit
        LoadPower : ElectricalUnit //TODO: Maybe we model this as a plug and socket?
        DevicePower : ElectricalUnit ?
        Serial : ElectricalUnit ?
        DiscreteOut : ElectricalUnit ?
        DrivePowerOut : ElectricalUnit ?
        DiscreteIn : ElectricalUnit ?
        DrivePowerIn : ElectricalUnit ?

    // Now we define some sets of components
    LocalNodes -> DeviceNode *
    LocalSmartNodes -> DeviceNode *
    LocalOrCentralNodes -> DeviceNode *

    // Define some constraints on the sets
    [LocalNodes = (WinSwitch, WinMotor)]
    [LocalOrCentralNodes = (WinSwitch, WinMotor, BCM.ref)]

    // Populate the LocalSmartNodes set with all the LocalNodes who are smart
    [all n : LocalNodes | (n in LocalSmartNodes) <=> n.smart]
    // Remove all nodes in LocalSmartNodes that don't belong to LocalNodes
    [no n : LocalSmartNodes | !(n in LocalNodes)]

    // If we have LocalSmartNodes then we need DevicePower
    [(#LocalSmartNodes > 0) <=> DoorInline.DevicePower]

    [WinMotor.Driver.ref in LocalOrCentralNodes]


// Functional Design - Deployment (Generic Window)
abstract WinSubSysDpl : Deployment //TODO: Cross-reference these constraints with Alex's Model
    // Define references to the functional analysis and device node sub systems
    fa -> WinSubSysFA
    dn -> WinSubSysDN

    // Containts on deployment
    [fa.WinSwitch.deployedTo.ref = dn.WinSwitch] //CHECK: Are references needed here?
    [fa.WinController.deployedTo.ref in dn.LocalOrCentralNodes.ref]
    [fa.WinController.config.expressDown => fa.WinController.deployedTo.smart]
    [fa.WinController.config.expressUpDown => 
        (
            dn.WinMotor.Driver.smart &&
            (fa.WinController.deployedTo.ref = dn.WinMotor.Driver.ref) &&
            fa.PinchDtcSubSysFA.PinchDetection.deployedTo.smart &&
            (fa.PinchDtcSubSysFA.PositionSensor.deployedTo.ref = dn.WinMotor)
        )]

    // Constrain the WinMotor to indicate that it is smart if it is its own Driver (i.e. the
    // motor has processing power to command the motor.)
    [(dn.WinMotor.Driver.ref = dn.WinMotor) <=> dn.WinMotor.smart]

    [dn.WinMotor.Driver.smart => (fa.CurrentSensor.deployedTo.ref = dn.WinMotor.Driver.ref)]
    [no dn.WinMotor.Driver.smart => 
        (
            (no dn.BCM) && 
            (fa.WinController.deployedTo.ref = fa.CurrentSensor.deployedTo.ref)
        )]
    [fa.WinMotor.deployedTo.ref = dn.WinMotor]

// Device Topology - Load Power (Generic Window)
abstract WinSubSysLoadPowerDT : DeviceTopology
    // Define a reference a to the window sub system device node
    dn -> WinSubSysDN

    wire -> Wire * // A reference to the set of wires associtated with this DT

    // We now define the load wires between the relevant device nodes.
    // We can either have load power to the motor directly or from the motor driver
    xor motorLoadWireConfig
        driveToMotor : LoadWire
            [source = dn.WinMotor.Driver.ref]
            [sink = dn.WinMotor]
        lpToMotor : LoadWire
            [source = dn.DoorInline.LoadPower]
            [sink = dn.WinMotor]

    // If we have drive to motor then the drive must be supplied the load power
    lpToDriver : LoadWire ?
        [source = dn.DoorInline.LoadPower]
        [sink = dn.WinMotor.Driver.ref]
    [lpToDriver <=> motorLoadWireConfig.driveToMotor]

    // If our motor is smart then we should provide load power to the motor directly.
    [dn.WinMotor.smart <=> motorLoadWireConfig.lpToMotor]

// Device Topology - Device Power (Generic Window)
abstract WinSubSysDevicePowerDT : DeviceTopology
    // Define a reference to the window sub system device node
    dn -> WinSubSysDN

    wire -> Wire * // A reference to the set of wires associtated with this DT

    // Now we should create a set of device power wires that connect the device power from the
    // door inline to each of the local smart nodes
    //TODO: Talk to Michal about how else we could write this constraint
    //BUG: When we have the following line it will force use to only have 1 local smart node
    // I am not sure why but that is what it is doing.
    //devicePower : DevicePowerWire * // This takes forever to find instances
    //    [source = dn.DoorInline.DevicePower]
    //[#devicePower = #dn.LocalSmartNodes]
    //[all dp : devicePower | (dp.sink.ref in dn.LocalSmartNodes.ref)]

    // Workaround Solution:
    // The only local smart components that we have are the switch and the motor.
    devicePower -> DevicePowerWire *

    // Define the possible wire from the door inline to the switch
    devicePowerWireInlineToSwitch : DevicePowerWire ?
        [source = dn.DoorInline.DevicePower]
        [sink = dn.WinSwitch]

    // Define the possible wire from the door inline to the motor
    devicePowerWireInlineToMotor : DevicePowerWire ?
        [source = dn.DoorInline.DevicePower]
        [sink = dn.WinMotor]

    // Constraints on populating the list of devicePower wires
    [devicePowerWireInlineToMotor <=> dn.WinMotor.smart]
    [devicePowerWireInlineToSwitch <=> dn.WinSwitch.smart]
    [devicePower = (devicePowerWireInlineToMotor, devicePowerWireInlineToSwitch)]



// Device Topology - Discrete Wires (Generic Window)
abstract WinSubSysSwitchDscDT : DeviceTopology
    // Define a reference to the window sub system device node
    dn -> WinSubSysDN

    wire -> Wire * // A reference to the set of wires associtated with this DT

    //TODO: This doesn't seem correct. The discrete wire should be
    // going to where the arbiter is right?

    // Define the discrete wire originating from the window switch
    switchDsc : DiscreteWire ?
        [source = dn.WinSwitch]
        [sink in (dn.WinMotor, dn.BCM.ref)]
    [(dn.WinMotor.Driver.ref = dn.WinSwitch) => no switchDsc]
    [switchDsc.sink.ref = dn.BCM.ref => (dn.WinMotor.Driver.ref = dn.BCM.ref || dn.WinMotor.smart)]  

// ------------------------------ CONCRETE CLAFERS -------------------------------------------//

// Technical Feature Model
PowerWindowSystemFM
    manualUpDown : Feature // Feature for basic control of power window (manual denotes that 
                            // it is not express)
    express : Feature ? // Feature for express movement of power window (i.e. move switch into
                        // a special position and window will continue moving even when switch
                        // has been released.)
        expressUp : Feature ?   // Refined feature of express which denotes the window moving up
                                // even after switch is released.
            pinchProtection : Feature ? // A feature that is only present when expressUp is present
                                        // which detects if an obstacle is in the path of the window
                                        // (i.e. a finger)

WinSysArch
    WinSysFA
        // Functional Analysis Architecture (Driver Window)
        DWinSubSysFA : WinSubSysFA

        // Functional Analysis Architecture (Passenger Window)
        PWinSubSysFA : WinSubSysFA
            // For the passenger window we have an extra device and command to denote the ability
            // to control the passenger window from the driver side switches
            DWinSwitch : FunctionalDevice
            dWinReq : Command
                [sender = DWinSwitch && receiver = PWinSubSysFA.WinRqArbiter]

        // Using the feature model have a set of constraints that gives the allowed
        // config features of the window controller.
        [no PowerWindowSystemFM.express => DWinSubSysFA.WinController.config.noExpress]
        [(PowerWindowSystemFM.express && no PowerWindowSystemFM.express.expressUp) =>
            DWinSubSysFA.WinController.config.expressDown]
        [PowerWindowSystemFM.express.expressUp => DWinSubSysFA.WinController.config.expressUpDown]

        [no PowerWindowSystemFM.express => PWinSubSysFA.WinController.config.noExpress]
        [(PowerWindowSystemFM.express && no PowerWindowSystemFM.express.expressUp) =>
            PWinSubSysFA.WinController.config.expressDown]
        [PowerWindowSystemFM.express.expressUp => PWinSubSysFA.WinController.config.expressUpDown]

    WinSysDpl
        DWinSubSysDpl : WinSubSysDpl
            [fa = WinSysArch.WinSysFA.DWinSubSysFA]
            [dn = WinSysArch.WinSysHW.DWinHW.DWinSubSysDN]

        PWinSubSysDpl : WinSubSysDpl
            [fa = WinSysArch.WinSysFA.PWinSubSysFA]
            [dn = WinSysArch.WinSysHW.PWinHW.PWinSubSysDN]

            [fa.WinController.deployedTo = dn.WinSwitch => fa.WinRqArbiter.deployedTo = dn.WinSwitch]
            [fa.WinController.deployedTo = dn.BCM => fa.WinRqArbiter.deployedTo in (dn.WinSwitch, dn.BCM)]
    WinSysHW : Hardware
        //TODO: ECU needs to be defined, BCM and ElectricCenter need to be moved into some other
        //root level Clafer that represents the rest of the car.
        BCM : ECU ?
        EC : ElectricCenter

        // Define references to our two (or possibly more) hardware subsystems
        DWinHW -> DWinSubSysHW
        PWinHW -> PWinSubSysHW

        [DWinHW = DWinSubSysHW]
        [PWinHW = PWinSubSysHW]

        // Constraint to propogate the BCM to the hardware level.
        [BCM = DWinSubSysHW.BCM]

        // Constraint to propagate the EC to the hardware level.
        [DWinHW.EC = EC]

        // Get the total length of the wire used for both subsystems
        totalWireLength ->> integer
        [totalWireLength = DWinHW.totalWireLength + PWinHW.totalWireLength] //TODO: Add passenger here.

        // Get the total mass of the wire used for both subsystems
        totalWireMass ->> integer
        [totalWireMass = DWinHW.totalWireMass + PWinHW.totalWireMass] //TODO: Add passenger here.
    

DWinSubSysHW
    BCM -> ECU ?
    EC -> ElectricCenter    //TODO: Do something with the EC

    DWinSubSysDN : WinSubSysDN
        // Constraint to mimic "mux" on slide 8
        [DoorInline.DiscreteOut <=> no DoorInline.DrivePowerOut] //TODO: This does not seem necessary
        [no DoorInline.DiscreteIn]
        [no DoorInline.DrivePowerIn]
        [some DoorInline.Serial, DoorInline.DiscreteOut, DoorInline.DrivePowerOut]
        [(#LocalSmartNodes > 0) <=> DoorInline.DevicePower]

        // Connect the BCM
        [parent.BCM.ref = BCM.ref]

    DWinSubSysLoadPowerDT : WinSubSysLoadPowerDT
        [dn = DWinSubSysDN]

        // Define a new wire that provides load power to the window switch
        lpToSwitch : LoadWire
            [source = parent.dn.DoorInline.LoadPower]
            [sink = parent.dn.WinSwitch]
            [length = 1] //TODO: Use correct data
        
        // Define another wire that provides load power from the switch to the DrivePowerOut in
        // the door inline
        switchToInline : LoadWire
            [source = parent.dn.WinSwitch]
            [sink = parent.dn.DoorInline.DrivePowerOut]
            [length = 1] //TODO: Use correct data

        // Waiting for clarification on lpToDrive clafer
        // set of constraints to mimic xor between lpToSwitch and lpToDriver
        [lpToSwitch => no lpToDriver]
        [no lpToSwitch => lpToDriver]

        // We can only have switchToInline if we have DiverPowerOut and we
        // are configure to have the lpToSwitch wire.
        [switchToInline <=> this.dn.DoorInline.DrivePowerOut]
        [switchToInline => lpToSwitch]

        [wire = (lpToSwitch, switchToInline, lpToDriver, 
            motorLoadWireConfig.lpToMotor, motorLoadWireConfig.driveToMotor)]

        // We now need to contrain the wires from WinSubSysLoadPowerDT
        // to have the proper lengths

        // If we are using the wire lpToMotor then its just the distance between
        // the inline and the motor.
        [motorLoadWireConfig.lpToMotor.length = 3] //TODO: Use correct data

        // If we use wire driveToMotor then it depends on what device is the driver
        //distMotorDriverToMotor ->> integer
        // Case 1: BCM is driver
        [(dn.WinMotor.Driver.ref = dn.BCM.ref) =>
                (motorLoadWireConfig.driveToMotor.length = 1)] //TODO: Use correct data
        // Case 2: Switch is driver
        [(dn.WinMotor.Driver.ref = dn.WinSwitch) =>
                (motorLoadWireConfig.driveToMotor.length = 1)] //TODO: Use correct data
        // Case 3: Motor is driver - This is not a valid case since if the motor
        // is the driver then we are using lpToMotor wire.

        // If we are using lpToDriver then again it depends on what device is the driver
        // Case 1: BCM is driver
        [(dn.WinMotor.Driver.ref = dn.BCM.ref) =>
                (lpToDriver.length = 1)] //TODO: Use correct data
        // Case 2: Switch is driver 
        [(dn.WinMotor.Driver.ref = dn.WinSwitch) =>
                (lpToDriver.length = 1)] //TODO: Use correct data

    DWinSubSysDevicePowerDT : WinSubSysDevicePowerDT
        [dn = DWinSubSysDN]
        [wire = devicePower.ref]

        //TODO: We now need to contrain the wires to have the proper lengths

    DWinSubSysSwitchDscDT : WinSubSysSwitchDscDT
        [dn = DWinSubSysDN]

        passengerDiscrete : DiscreteWire ?
            [source = parent.dn.WinSwitch]
            [sink = parent.dn.DoorInline.DiscreteOut]
            [length = 1]

        [passengerDiscrete <=> this.dn.DoorInline.DiscreteOut]
        //TODO: Should there be a constraint that checks if there is a passenger?

        [wire = (switchDsc, passengerDiscrete)]

        //TODO: We now need to contrain the wires to have the proper lengths

    //TODO: Sum up the length of the wires from each of the topologies.
    totalWireLength ->> integer
    [totalWireLength = (sum DWinSubSysLoadPowerDT.wire.length) +
        (sum DWinSubSysSwitchDscDT.wire.length) +
        (sum DWinSubSysDevicePowerDT.wire.length)]
    totalWireMass ->> integer
    [totalWireMass = (sum DWinSubSysLoadPowerDT.wire.mass) +
        (sum DWinSubSysSwitchDscDT.wire.mass) +
        (sum DWinSubSysDevicePowerDT.wire.mass)]


PWinSubSysHW
    BCM -> ECU //TODO: Does this need to be optional?
    EC -> ElectricCenter

    PWinSubSysDN : WinSubSysDN
        DWinSwitch : DeviceNode

        // Constraint to mimic "mux" on slide 9
        [DoorInline.DiscreteIn <=> no DoorInline.DrivePowerIn] //TODO: This does not seem necessary
        [no DoorInline.DiscreteOut]
        [no DoorInline.DrivePowerOut]
        [some DoorInline.Serial, DoorInline.DiscreteIn, DoorInline.DrivePowerIn]
        [(#LocalSmartNodes > 0) <=> DoorInline.DevicePower]

        // Connect the BCM
        [BCM = parent.BCM]

    PWinSubSysLoadPowerDT : WinSubSysLoadPowerDT
        [dn = PWinSubSysDN]

        drivePowerIn : LoadWire ?
            [source = parent.dn.DoorInline.DrivePowerIn]
            [sink = parent.dn.WinSwitch]
            [length = 1]

        //TODO: Are we missing any constraints?
        [this.dn.DoorInline.DrivePowerIn <=> drivePowerIn]

        [wire = (drivePowerIn, lpToDriver, 
            motorLoadWireConfig.lpToMotor, motorLoadWireConfig.driveToMotor)]

        // We now need to contrain the wires from WinSubSysLoadPowerDT
        // to have the proper lengths

        // If we are using the wire lpToMotor then its just the distance between
        // the inline and the motor.
        [motorLoadWireConfig.lpToMotor.length = 3] //TODO: Use correct data

        // If we use wire driveToMotor then it depends on what device is the driver
        //distMotorDriverToMotor ->> integer
        // Case 1: BCM is driver
        [(dn.WinMotor.Driver.ref = dn.BCM.ref) =>
                (motorLoadWireConfig.driveToMotor.length = 1)] //TODO: Use correct data
        // Case 2: Switch is driver
        [(dn.WinMotor.Driver.ref = dn.WinSwitch) =>
                (motorLoadWireConfig.driveToMotor.length = 1)] //TODO: Use correct data
        // Case 3: Motor is driver - This is not a valid case since if the motor
        // is the driver then we are using lpToMotor wire.

        // If we are using lpToDriver then again it depends on what device is the driver
        // Case 1: BCM is driver
        [(dn.WinMotor.Driver.ref = dn.BCM.ref) =>
                (lpToDriver.length = 1)] //TODO: Use correct data
        // Case 2: Switch is driver 
        [(dn.WinMotor.Driver.ref = dn.WinSwitch) =>
                (lpToDriver.length = 1)] //TODO: Use correct data

    PWinSubSysDevicePowerDT : WinSubSysDevicePowerDT
        [dn = PWinSubSysDN]
        [wire = devicePower.ref]

    PWinSubSysSwitchDscDT : WinSubSysSwitchDscDT
        [dn = PWinSubSysDN]

        discreteIn : DiscreteWire ?
            [source = parent.dn.DoorInline.DiscreteIn]
            [sink in (parent.dn.LocalSmartNodes)]
            [length = 1]

        [discreteIn <=> this.dn.DoorInline.DiscreteIn]

        [wire = (switchDsc, discreteIn)]

    //TODO: Sum up the length of the wires from each of the topologies.
    totalWireLength ->> integer
    [totalWireLength = (sum PWinSubSysLoadPowerDT.wire.length) +
        (sum PWinSubSysSwitchDscDT.wire.length) +
        (sum PWinSubSysDevicePowerDT.wire.length)]
    totalWireMass ->> integer
    [totalWireMass = (sum PWinSubSysLoadPowerDT.wire.mass) +
        (sum PWinSubSysSwitchDscDT.wire.mass) +
        (sum PWinSubSysDevicePowerDT.wire.mass)]


// Optimization Goals:
// Minimize the length of the wires
<<min WinSysArch.WinSysHW.totalWireLength>>
<<min WinSysArch.WinSysHW.totalWireMass>>

