//========================
/* Distance Data */
//========================

Dist
  switchToMotor : integer = 40
  switchToDoorModule : integer = 20
  motorToDoorModule : integer = 30
  inlineToSwitch : integer = 45
  inlineToMotor : integer = 45
  inlineToDoorModule : integer = 35

  doorSpliceToSwitch : integer = 25
  doorSpliceToMotor : integer = 25
  doorSpliceToDoorModule : integer = 15

  inlineDtoInlineFP : integer = 170 
  inlineDtoBCM : integer = 40  
  inlineFPtoBCM : integer = 130  

  /* for power supply */
  inlineDtoPowerFuse : integer = 40  
  inlineFPtoPowerFuse : integer = 130  

abstract PWSubsystemConfig
  basicUpDown  // mandatory feature
  express ?    // at least express down
    expressUp ?  // both express up and express down
  otherRemoteControl ?

abstract Device
  electronic ?
  smart ?
  [smart => electronic]
  deployedFrom -> AnalysisFunction *
    [this.deployedTo = parent]

abstract AnalysisFunction
  deployedTo -> Device
    [parent in this.deployedFrom]

abstract FunctionalDevice : AnalysisFunction

abstract AFConnector
  src -> AnalysisFunction
  dest -> AnalysisFunction

abstract ECU : Device
  [smart]

abstract PWSubsystemFunctionalArchitecture
  WinController : AnalysisFunction
  Motor : FunctionalDevice
  Switch : FunctionalDevice
  CurrentSensor : FunctionalDevice

  PositionSensor : FunctionalDevice ?
  PinchDetection : AnalysisFunction?

  OtherRemoteArbiter : AnalysisFunction ?

  conCommand : AFConnector
    [src = WinController]
    [dest = Motor]

  conCurrent : AFConnector
    [src = CurrentSensor]
    [dest = WinController]

  pinchDetectionConnections ?
    conPositionToWinController : AFConnector
      [src = PositionSensor]
      [dest = WinController]
    conPositionToPinchDetection : AFConnector
      [src = PositionSensor]
      [dest = PinchDetection]
    conCurrentToPinchDetection : AFConnector
      [src = CurrentSensor]
      [dest = PinchDetection]
    conPinchDetectionToWinController : AFConnector
      [src = PinchDetection]
      [dest = WinController]

  config -> PWSubsystemConfig

  [config.express.expressUp <=> PinchDetection]
  [config.express.expressUp <=> PositionSensor]
  [config.express.expressUp <=> pinchDetectionConnections]

  [config.otherRemoteControl <=> OtherRemoteArbiter]

abstract DPWSubsystemFunctionalArchitecture : PWSubsystemFunctionalArchitecture

  conArbitratedRequestFromOtherRemoteArbiterToWinController : AFConnector ?
    [src = OtherRemoteArbiter]
    [dest = WinController]
  conRequestFromMainSwitchToOtherRemoteArbiter : AFConnector ?
    [src = Switch]
    [dest = OtherRemoteArbiter]
  conRequestFromMainSwitchToWinController : AFConnector ?
    [src = Switch]
    [dest = WinController]

  [config.otherRemoteControl <=> 
      conRequestFromMainSwitchToOtherRemoteArbiter]
  [config.otherRemoteControl <=> 
      conArbitratedRequestFromOtherRemoteArbiterToWinController]

  [no config.otherRemoteControl <=> conRequestFromMainSwitchToWinController]

abstract FPPWSubsystemFunctionalArchitecture : PWSubsystemFunctionalArchitecture
  MasterSwitch -> FunctionalDevice
  SwitchArbiter : AnalysisFunction

  conArbitratedReqFromSwitchArbiterToOtherRemoteArbiter : AFConnector ?
    [src = SwitchArbiter]
    [dest = OtherRemoteArbiter]

  conArbitratedReqFromSwitchArbiterToWinController : AFConnector ?
    [src = SwitchArbiter]
    [dest = WinController]

  conPReqFromSwitchToSwitchArbiter : AFConnector
    [src = Switch]
    [dest = SwitchArbiter]

  [config.otherRemoteControl <=> conArbitratedReqFromSwitchArbiterToOtherRemoteArbiter]
  [no config.otherRemoteControl <=> conArbitratedReqFromSwitchArbiterToWinController]

  /* connect MainSwitch to all other switches */
  conFromMainSwitchToSwitchArbiter : AFConnector
    [src = MasterSwitch.ref]
    [dest = SwitchArbiter]    


abstract FPPWSubsystemHardware : PWSubsystemHardware
  switchRequestJunction : Device ?
    [no electronic]
    [no smart]
  masterSwitch -> Device

abstract PWSubsystemHardware

  doorModule : ECU ?
  switch -> Device
  motor -> Device
  bcm -> ECU ?

  localComponents -> Device 0..4
  [localComponents = switch.ref, motor, bcm.ref, doorModule]
  localSmartComponents -> Device 0..4
  [localSmartComponents =  smartSwitch, smartMotor, bcm.ref, doorModule]

  smartSwitch : Device ?
    [smart]
    [switch = this]
  dumbSwitch : Device ?
    [no smart]
    [switch = this]
  [smartSwitch xor dumbSwitch]

  smartMotor : Device ?
    [smart]
    [motor = this]
  dumbMotor : Device ?
    [no smart]
    [motor = this]
  [smartMotor xor dumbMotor]

  powerFuse : Device
    [no electronic]
    [no smart]
    [no deployedFrom] 

  /* Bus */
  [busType <=> (#localSmartComponents > 1)]
  [no busType => (busLength = 0)]
  busLength ->> integer
  busMass ->> integer
  [busMass = busLength]
  
  xor busType ?
    branchToDoorModule
      [bcm && doorModule]

      [(smartSwitch && smartMotor) => 
        (busLength = dist.inlineToBCM + Dist.inlineToDoorModule + Dist.motorToDoorModule + Dist.switchToDoorModule)]

      [(smartSwitch && !smartMotor) => 
        (busLength = dist.inlineToBCM + Dist.inlineToDoorModule + Dist.switchToDoorModule) ]

      [(!smartSwitch && smartMotor) => 
        (busLength = dist.inlineToBCM + Dist.inlineToDoorModule + Dist.motorToDoorModule) ]

      [(!smartSwitch && !smartMotor) => 
        (busLength = dist.inlineToBCM + Dist.inlineToDoorModule) ]

    branchToSwitch
      [bcm && smartSwitch && !doorModule]

      [(smartMotor) => 
        (busLength = dist.inlineToBCM + Dist.inlineToSwitch + Dist.switchToMotor)]

      [(!smartMotor) => 
        (busLength = dist.inlineToBCM + Dist.inlineToSwitch) ]

    branchToAllSmartComponents
      [bcm]
//      [(no smartSwitch && no smartMotor && no doorModule) => busLength = 0]
      [(no smartSwitch && no smartMotor && doorModule) => busLength = dist.inlineToBCM + Dist.inlineToDoorModule]

      [(no smartSwitch && smartMotor && no doorModule) => busLength = dist.inlineToBCM + Dist.inlineToMotor]
      [(no smartSwitch && smartMotor && doorModule) => busLength = dist.inlineToBCM + Dist.inlineToMotor + Dist.doorSpliceToDoorModule]

      [(smartSwitch && no smartMotor && no doorModule) => busLength = dist.inlineToBCM + Dist.inlineToSwitch]
      [(smartSwitch && no smartMotor && doorModule) => busLength = dist.inlineToBCM + Dist.inlineToSwitch]

      [(smartSwitch && smartMotor && no doorModule) => busLength = dist.inlineToBCM + Dist.inlineToSwitch + Dist.doorSpliceToMotor]
      [(smartSwitch && smartMotor && doorModule) => busLength = dist.inlineToBCM + Dist.inlineToSwitch + Dist.doorSpliceToMotor]

    localBusOnly
      [no bcm]
      [(smartSwitch && smartMotor) => busLength = Dist.switchToMotor]
      [(doorModule && smartSwitch && !smartMotor) => busLength = Dist.switchToDoorModule]
      [(doorModule && smartMotor && !smartSwitch) => busLength = Dist.motorToDoorModule]

  dist
    inlineToBCM ->> integer
    inlineToFuse ->> integer

abstract DPWSubsystemDeploymentAndWiring : PWSubsystemDeploymentAndWiring
  /* Other Remote Control */

  [!fa.config.otherRemoteControl => no wireRequestIndirect]
  [fa.config.otherRemoteControl => (
      (!ht.switch.smart) <=> wireRequestIndirect)
  ]

  wireRequestIndirect : DiscreteWire ?
    [src.ref = ht.switch.ref]
    [dest.ref in ht.localSmartComponents.ref]
    // from switch to any other local smart component {BCM, smartMotor, doorModule}

    [(dest.ref = ht.motor.ref) => 
      (length = numberOfDiscreteWiresFromSwitch * Dist.switchToMotor)]
    [(dest.ref = ht.doorModule) => 
      (length = numberOfDiscreteWiresFromSwitch * Dist.switchToDoorModule)]
    [(dest.ref = ht.bcm.ref) => 
      (length = numberOfDiscreteWiresFromSwitch * (Dist.inlineToSwitch 
                                              + ht.dist.inlineToBCM))]

  /* No Other Remote Control */

  [fa.config.otherRemoteControl => no wireRequestDirect]

  [!fa.config.otherRemoteControl => 
    ((fa.WinController.deployedTo.ref = ht.switch.ref) => no wireRequestDirect ) &&
    ((fa.WinController.deployedTo.ref != ht.switch.ref ) =>
      (
        ((ht.switch.ref != motorDriver.ref && !ht.switch.smart) 
             => wireRequestDirect ) &&
        ((ht.switch.ref = motorDriver.ref) => no wireRequestDirect )
      ))
  ]

  wireRequestDirect : DiscreteWire ?
    [src = ht.switch.ref]
    [dest.ref in ht.localSmartComponents.ref]

    [(dest.ref = ht.motor.ref) => 
      (length = numberOfDiscreteWiresFromSwitch * Dist.switchToMotor)]
    [(dest.ref = ht.doorModule) => 
      (length = numberOfDiscreteWiresFromSwitch * Dist.switchToDoorModule)]
    [(dest.ref = ht.bcm.ref) => 
      (length = numberOfDiscreteWiresFromSwitch * (Dist.inlineToSwitch 
                                              + ht.dist.inlineToBCM))]

  [wireFromLoadPowerFuseToMotorDriver]

abstract FPPWSubsystemDeploymentAndWiring : PWSubsystemDeploymentAndWiring

  fpfa -> FPPWSubsystemFunctionalArchitecture
  [fpfa.ref = fa.ref]

  fpht -> FPPWSubsystemHardware
  [fpht.ref = ht.ref]

  [fpfa.SwitchArbiter => (
    (fpfa.SwitchArbiter.deployedTo.ref = fpht.switchRequestJunction) 
      => (fa.WinController.deployedTo.ref != ht.switch.ref)
    // if we have a switch arbiter, then we cannot put window controller before that
    )
  ]

  // Switch Arbiter

  // if there is a switch request junction, it has to have the switch arbiter
  // otherwise, there is no point in having this hardware component
  [fpht.switchRequestJunction => (fpfa.SwitchArbiter.deployedTo.ref = fpht.switchRequestJunction)]

  [fpfa.SwitchArbiter => (
      (fpfa.SwitchArbiter.deployedTo.ref = ht.switch.ref ) 
      ||
      (
        (fpfa.SwitchArbiter.deployedTo.ref = fpht.switchRequestJunction) && 
        (!ht.switch.smart) &&         
        (fpfa.OtherRemoteArbiter => fa.OtherRemoteArbiter.deployedTo.ref != ht.switch.ref) 
      )
      ||
      (
        (fpfa.SwitchArbiter.deployedTo.ref != ht.switch.ref) && 
        (fpfa.SwitchArbiter.deployedTo.ref != fpht.switchRequestJunction) && 
        (
          (ht.motor.smart && (fpfa.SwitchArbiter.deployedTo.ref = ht.motor.ref)) ||
          (ht.doorModule && (fpfa.SwitchArbiter.deployedTo.ref = ht.doorModule))
        )
      )
      ||
        (
          (
            !ht.motor.smart && 
            !ht.doorModule && 
            ht.bcm
          ) 
          && (fpfa.SwitchArbiter.deployedTo.ref = ht.bcm.ref)
        )
    )
  ]

  ////////////////////////////////////////
  // fpfa.conPReqFromSwitchToSwitchArbiter
  ////////////////////////////////////////
  // passenger window: from the local switch to the switch arbiter (conPReqFromSwitchToSwitchArbiter):

  [fpfa.conPReqFromSwitchToSwitchArbiter => (    
    ((ht.switch.smart || (fpfa.SwitchArbiter.deployedTo.ref = ht.switch.ref)) => (no wirePReqFromSwitchToSwitchArbiter)) &&
    // if switch is smart, are there no wires
    ((!ht.switch.smart && (fpfa.SwitchArbiter.deployedTo.ref != ht.switch.ref)) => wirePReqFromSwitchToSwitchArbiter)
  )]

  wirePReqFromSwitchToSwitchArbiter : DiscreteWire ?
    [src = ht.switch.ref]
    [(fpfa.SwitchArbiter.deployedTo.ref = fpht.switchRequestJunction) => (dest.ref = fpfa.SwitchArbiter.deployedTo.ref)]
    // if deployed on the junction, then the wire has to come to the junction
    [(fpfa.SwitchArbiter.deployedTo.ref != fpht.switchRequestJunction) => (dest.ref in ht.localSmartComponents)]
    // if deployed elsewhere (which can be local smart component only, not switch), then we can have a wire to any local smart component

    // todo: handle this properly!
    [(dest.ref = fpht.switchRequestJunction) => (length = 0)]
    [(dest.ref = ht.motor.ref) => (length = numberOfDiscreteWiresFromSwitch * Dist.switchToMotor)]
    [(dest.ref = ht.doorModule) => (length = numberOfDiscreteWiresFromSwitch * Dist.switchToDoorModule)]
    [(dest.ref = ht.bcm.ref) => (length = numberOfDiscreteWiresFromSwitch * (Dist.inlineToSwitch + ht.dist.inlineToBCM))]

//////////////////////////////////////////////
//  from switch arbiter to other remote arbiter: (fpfa.control.localAndRemote.conArbitratedReqFromSwitchArbiterToOtherRemoteArbiter)
//////////////////////////////////////////////

  [no fpfa.config.otherRemoteControl => no wireArbitratedReqFromSwitchArbiterToOtherRemoteArbiter]
  [fpfa.config.otherRemoteControl => ((fpfa.SwitchArbiter.deployedTo.ref = fpht.switchRequestJunction) <=> wireArbitratedReqFromSwitchArbiterToOtherRemoteArbiter)]
  // if there is a remote request, and the switch arbiter is on the junction,
  // then we need a discrete wire from the junction to the location of the remote switch arbiter (or any smart component, we allow that)
  // else it's a serial communication

  wireArbitratedReqFromSwitchArbiterToOtherRemoteArbiter : DiscreteWire ?
    [src = fpht.switchRequestJunction]
    [dest.ref in ht.localSmartComponents]

//    todo: handle this!
    [(dest.ref = ht.motor.ref) => (length = numberOfDiscreteWiresFromSwitch * Dist.switchToMotor)]
    [(dest.ref = ht.doorModule) => (length = numberOfDiscreteWiresFromSwitch * Dist.switchToDoorModule)]
    [(dest.ref = ht.bcm.ref) => (length = numberOfDiscreteWiresFromSwitch * (Dist.inlineToSwitch + ht.dist.inlineToBCM))]

//////////////////////////////////////////////
//  from switch arbiter directly to the window controller (fpfa.control.localOnly.conArbitratedReqFromSwitchArbiterToWindowController)
//////////////////////////////////////////////

  [fpfa.config.otherRemoteControl => no wireArbitratedReqFromSwitchArbiterToWindowController]
  [!fpfa.config.otherRemoteControl => (((fpfa.SwitchArbiter.deployedTo.ref = fpht.switchRequestJunction) || (fpfa.SwitchArbiter.deployedTo.ref = fpht.switch.ref && !fpht.switch.smart)) <=> wireArbitratedReqFromSwitchArbiterToWindowController)]
  // we can have a discrete wire only from the junction, meaning the switch arbiter is located on the junction
  // in other cases, we have a smart communication

  wireArbitratedReqFromSwitchArbiterToWindowController : DiscreteWire ?
    [src = fpht.switchRequestJunction]
    [dest = fa.WinController.deployedTo.ref]

    [(dest.ref = ht.motor.ref) => (length = numberOfDiscreteWiresFromSwitch * Dist.switchToMotor)]
    [(dest.ref = ht.doorModule) => (length = numberOfDiscreteWiresFromSwitch * Dist.switchToDoorModule)]
    [(dest.ref = ht.bcm.ref) => (length = numberOfDiscreteWiresFromSwitch * (Dist.inlineToSwitch + ht.dist.inlineToBCM))]

//    [dest != ht.switch.ref] // the junction cannot connect back to the switch!    

  ///////////////////////////////////////////////////////
  // from MS to a local switch arbiter: conFromMainSwitchtoReq 
  //////////////////////////////////////////////////////

  [fpfa => (

    (
      (fpfa.SwitchArbiter.deployedTo.ref = ht.switch && !ht.switch.electronic) => 
      // 1 : if switch arbiter - to the local switch && local switch is not electronic (not possible to be electronic)
      (
        wirePowerFromMSToSwitch 
        // 1.1 : power wire from MS to the switch
        || wireDiscreteFromMSToSwitch
        // 1.2 : discrete wire from MS to the switch
        || 
          (
            (wireDiscreteFromDoorModuleOrBCMToSwitch || wirePowerFromDoorModuleOrBCMToSwitch || ht.switch.smart)
            // 1.3: discrete or power wire from the local door module or from BCM to the local switch
            &&
            (fpht.masterSwitch.smart xor wireDiscreteFromMSToSmartComponent) 
            // and a discrete from MS to a smart component, if MS is not smart
          )
      )
    ) 
    &&
    (
      (fpfa.SwitchArbiter.deployedTo.ref = fpht.switchRequestJunction) => 
      // 2: if switch arbiter is to the junction
      (!fpht.masterSwitch.smart && wireDiscreteFromMSToJunction)
      // then a discrete wire from a non-smart master switch to the junction. TODO: anything else?
    )
    &&
    (
      (fpfa.SwitchArbiter.deployedTo.ref in ht.localSmartComponents) =>
      //  3: switch arbiter on a smart component
      (
        (!fpht.masterSwitch.smart => wireDiscreteFromMSToSmartComponent) 
        // 3.1. if MS is not smart, at least one other component has to be smart, a discrete wire to that component 
        // 3.2. if MS is smart (auto): at least one other component has to be smart, and there will be switch arbiter 
      )
    )
  )]

  distMainSwitchToLocalInline ->> integer 
  [distMainSwitchToLocalInline = Dist.inlineToSwitch + Dist.inlineDtoInlineFP]

  xor wireFromMS ?
    wirePowerFromMSToSwitch : PowerWire ?
      [src = fpht.masterSwitch.ref]
      [dest = ht.switch.ref]
      [no wireDiscreteFromMSToSmartComponent]
      [motorDriver.ref = ht.switch.ref]

      [length = numberOfDiscreteWiresFromSwitch * (distMainSwitchToLocalInline + Dist.inlineToSwitch)]
      // in this case, the switch has to be the motor driver, otherwise there is no point in sending power
    wireDiscreteFromMSToSwitch : DiscreteWire ?
      [src = fpht.masterSwitch.ref]
      [dest = ht.switch.ref]
      [no wireDiscreteFromMSToSmartComponent]

      [length = numberOfDiscreteWiresFromSwitch * (distMainSwitchToLocalInline + Dist.inlineToSwitch)]
    wirePowerFromDoorModuleOrBCMToSwitch : PowerWire ?
      [(src = ht.doorModule) || (src = ht.bcm.ref)]
      [dest = ht.switch.ref]
      [motorDriver.ref = ht.switch.ref] 
      // in this case, the switch has to be the motor driver, otherwise there is no point in sending power
      [(src.ref = ht.doorModule) => (length = numberOfDiscreteWiresFromSwitch * Dist.switchToDoorModule)]
      [(src.ref = ht.bcm.ref) => (length = numberOfDiscreteWiresFromSwitch * (Dist.inlineToSwitch + ht.dist.inlineToBCM))]

    wireDiscreteFromDoorModuleOrBCMToSwitch : DiscreteWire ?
      [(src = ht.doorModule) || (src = ht.bcm.ref)]
      [dest = ht.switch.ref]
      [(src.ref = ht.doorModule) => (length = numberOfDiscreteWiresFromSwitch * Dist.switchToDoorModule)]
      [(src.ref = ht.bcm.ref) => (length = (numberOfDiscreteWiresFromSwitch * Dist.inlineToSwitch + ht.dist.inlineToBCM))]

    wireDiscreteFromMSToJunction : DiscreteWire
      [src = fpht.masterSwitch.ref]
      [dest = fpht.switchRequestJunction]
      [no wireDiscreteFromMSToSmartComponent]
      [length = numberOfDiscreteWiresFromSwitch * (distMainSwitchToLocalInline + Dist.inlineToSwitch)]

  wireDiscreteFromMSToSmartComponent : DiscreteWire ?
    [src = fpht.masterSwitch.ref]
    [dest.ref in ht.localSmartComponents]

    [(dest.ref = ht.switch.ref) =>  (length = numberOfDiscreteWiresFromSwitch * (distMainSwitchToLocalInline + Dist.inlineToSwitch))]
    [(dest.ref = ht.motor.ref)  =>  (length = numberOfDiscreteWiresFromSwitch * (distMainSwitchToLocalInline + Dist.inlineToMotor))]
    [(dest.ref = ht.doorModule) => (length = numberOfDiscreteWiresFromSwitch * (distMainSwitchToLocalInline + Dist.inlineToDoorModule))]
    [(dest.ref = ht.bcm.ref) => (length = numberOfDiscreteWiresFromSwitch * (Dist.inlineToSwitch + Dist.inlineDtoBCM))]
                    //  main switch to inline +  BCM to inline

  [(no wirePowerFromMSToSwitch && no wirePowerFromDoorModuleOrBCMToSwitch) <=> wireFromLoadPowerFuseToMotorDriver]

abstract PWSubsystemDeploymentAndWiring
  ht -> PWSubsystemHardware
  fa -> PWSubsystemFunctionalArchitecture

  [fa.Switch.deployedTo.ref = ht.switch.ref] // to the local switch only
  [fa.Motor.deployedTo.ref  = ht.motor.ref ] // to the motor device only

  // Motor Driver
  motorDriver -> Device
  [motorDriver.ref in ht.localComponents.ref] 
  // MotorDriver can be any of {BCM, switch, motor, doorModule}

  [(ht.doorModule && ht.bcm) => (motorDriver.ref != ht.bcm.ref)]
  // if we have a door module and BCM, then the motor driver is not BCM
  // ExpressUp: Position Sensor, Pinch Detection, WinCotnroller

  [fa.config.express.expressUp =>
    (
      (fa.PositionSensor.deployedTo.ref in ht.localComponents.ref) &&
      (fa.PinchDetection.deployedTo.ref in ht.localSmartComponents.ref) &&
      (fa.WinController.deployedTo.ref in ht.localSmartComponents.ref) &&
      ((fa.PositionSensor.deployedTo.ref != motorDriver.ref)
          => (fa.PositionSensor.deployedTo.ref = ht.motor.ref))
    )
  ]

  [fa.config.express => (fa.WinController.deployedTo.electronic)]

  [motorDriver.smart => (
      (fa.WinController.deployedTo.ref in ht.localSmartComponents.ref) &&
      (fa.CurrentSensor.deployedTo.ref = motorDriver.ref)
    )
  ]
  [!motorDriver.electronic => (
  // if the motor is driven by a dumb component (not even electronic)
    (
      (fa.WinController.deployedTo.ref = ht.motor.ref) && 
      (fa.CurrentSensor.deployedTo.ref = ht.motor.ref)
      // both WinController and CurrentSensor are on the motor (thermistor)
    )
    || // or
    (
      (fa.WinController.deployedTo.ref = ht.switch.ref) && 
      (fa.CurrentSensor.deployedTo.ref = ht.switch.ref)
      // both window controller and the current sensor are on the dumb switch
    )
  )]

  [(motorDriver.electronic && !motorDriver.smart) =>
    (fa.CurrentSensor.deployedTo.ref = motorDriver.ref) &&
    (fa.WinController.deployedTo.ref in ht.localComponents.ref)
  ]

  [fa.OtherRemoteArbiter => 
    (fa.WinController.deployedTo.ref != ht.motor.ref => 
        (fa.OtherRemoteArbiter.deployedTo.ref 
               = fa.WinController.deployedTo.ref)
    )
    &&
    (fa.OtherRemoteArbiter.deployedTo.ref in ht.localSmartComponents.ref)
  ] 

  distFromMotorToMotorDriver ->> integer
  [(motorDriver.ref = ht.switch.ref) => 
    (distFromMotorToMotorDriver = Dist.switchToMotor)]
  [(motorDriver.ref = ht.motor.ref) => 
    (distFromMotorToMotorDriver = 0)]
  [(motorDriver.ref = ht.doorModule) => 
    (distFromMotorToMotorDriver = Dist.motorToDoorModule)]
  [(motorDriver.ref = ht.bcm.ref) => 
    (distFromMotorToMotorDriver = Dist.inlineToMotor + ht.dist.inlineToBCM)]

  /* Command Wire */
  wireCommand : PowerWire ?
    [src = motorDriver.ref]
    [dest = ht.motor.ref]
    [length = distFromMotorToMotorDriver]

  [(motorDriver.ref = ht.motor.ref) <=> ht.motor.smart]
  // if the driver is not the motor, then we need a power wire for the command
  // we are not making discrete connection to the motor
  [ht.motor.smart <=> no wireCommand]

  /* Position Wire */

  wirePosition : AnalogWire ?
    [src = ht.motor.ref]
    [dest = motorDriver.ref]
    [length = 2 * distFromMotorToMotorDriver]

  [wirePosition <=> (fa.config.express.expressUp && (motorDriver.ref != ht.motor.ref) )]
  // the wire is present if and only if we have express-up,
  // and the motor driver is not on the motor
  [(fa.config.express.expressUp && motorDriver.ref = ht.switch.ref) => ht.switch.smart]

  numberOfDiscreteWiresFromSwitch ->> integer
  [numberOfDiscreteWiresFromSwitch = if fa.config.express then 3 else 2]

  //////////////////////////////
  // switch or motor being electronic
  //////////////////////////////

  [(!ht.switch.smart) => 
    // if the switch is not smart
    (ht.switch.electronic <=> (fa.config.express && fa.WinController.deployedTo.ref = ht.switch.ref))
    // it's electronic iff the window controller is located to it, and we have express feature
  ]

  [(!ht.motor.smart) => 
    // if the motor is not smart
    (ht.motor.electronic <=> (
        // it's electronic iff the window controller is located to it, and we have express feature
        // or we use hall sensor as a position sensor (meaning it's placed on the motor)
        (fa.config.express && (fa.WinController.deployedTo.ref = ht.motor.ref)) || 
        (fa.config.express.expressUp && (fa.PositionSensor.deployedTo.ref = ht.motor.ref))
      )
    )
  ]

//////////// Load Power Supply /////////////////////////
  // from the load power fuse, to the motor driver 

  wireFromLoadPowerFuseToMotorDriver : PowerWire ?
    [src.ref = ht.powerFuse]
    [dest.ref = motorDriver.ref]
    // we do not need an extra power supply, if we are getting it through the main switch or BCM or DoorModule 
    [(motorDriver.ref = ht.switch.ref) => (length = ht.dist.inlineToFuse + Dist.inlineToSwitch)]
    // the door module is the switch        
    [(motorDriver.ref = ht.motor.ref) => (length = ht.dist.inlineToFuse + Dist.inlineToMotor)]
    // the door module is the motor itself        
    [(motorDriver.ref = ht.doorModule) => (length = ht.dist.inlineToFuse + Dist.inlineToDoorModule)]
    // the door module is the motor driver
    [(motorDriver.ref = ht.bcm) => (length = 0)] 
    // bcm has it's own power supply (and actially it's very close to that), and we don't do it here

//////////// Device Power Supply ///////////////////////////////
  // from the device power fuse, to any electronic component 

  [ht.switch.electronic <=> wireFromDevicePowerFuseToSwitch]
  wireFromDevicePowerFuseToSwitch: DevicePowerWire ?
    [src.ref = ht.powerFuse]
    [dest.ref = ht.switch.ref]
    [length = ht.dist.inlineToFuse + Dist.inlineToSwitch]

  [ht.motor.electronic <=> wireFromDevicePowerFuseToMotor]
  wireFromDevicePowerFuseToMotor: DevicePowerWire ?
    [src.ref = ht.powerFuse]
    [dest.ref = ht.motor.ref]
    [length = ht.dist.inlineToFuse + Dist.inlineToMotor]

  [ht.doorModule <=> wireFromDevicePowerFuseToDoorModule]
  wireFromDevicePowerFuseToDoorModule: DevicePowerWire ?
    [src.ref = ht.powerFuse]
    [dest.ref = ht.doorModule]
    [length = ht.dist.inlineToFuse + Dist.inlineToDoorModule]

abstract WireConnector
  src -> Device
  dest -> Device
  [src.ref != dest.ref]
  length ->> integer                        // wire length
  mass ->> integer     // wire mass (thickness * length)

abstract DiscreteWire : WireConnector       // inherits WireConnector
  [mass = length]       // take as a base thickness

abstract AnalogWire : WireConnector       // inherits WireConnector
  [mass = length]       // take as a base thickness

abstract PowerWire : WireConnector          // inherits WireConnector
  [mass = length]       // power wire is approx 7 times thicker than the discrete wire

abstract DevicePowerWire : WireConnector          // inherits WireConnector
  [mass = length]       // devie power wire has the same thickness

abstract PowerWindowSystem
  BCM : ECU ?

  driverFAConfig : PWSubsystemConfig
  driverFA : DPWSubsystemFunctionalArchitecture
    [config = driverFAConfig]

  frontPassengerFAConfig : PWSubsystemConfig
  frontPassengerFA : FPPWSubsystemFunctionalArchitecture
    [config = frontPassengerFAConfig]
    [MasterSwitch.ref = driverFA.Switch]
  
  driverHardware: PWSubsystemHardware
    [bcm = BCM]
    [dist.inlineToBCM = Dist.inlineDtoBCM]
    [dist.inlineToFuse = Dist.inlineDtoPowerFuse]
  frontPassengerHardware: FPPWSubsystemHardware
    [bcm = BCM]
    [masterSwitch.ref = driverHardware.switch.ref]
    [dist.inlineToBCM = Dist.inlineFPtoBCM]
    [dist.inlineToFuse = Dist.inlineFPtoPowerFuse]

  driverDeploymentAndWiring : DPWSubsystemDeploymentAndWiring
    [ht = driverHardware]
    [fa = driverFA]

  frontPassengerDeploymentAndWiring : FPPWSubsystemDeploymentAndWiring
    [ht = frontPassengerHardware]
    [fa = frontPassengerFA]

  allSmartComponents -> Device 0..8
  [allSmartComponents.ref = driverHardware.localSmartComponents.ref ++ frontPassengerHardware.localSmartComponents.ref]
  quality
    numberOfSmartComponents ->> integer = #allSmartComponents
    wireLength ->> integer = sum WireConnector.length + driverHardware.busLength + frontPassengerHardware.busLength
    wireMass ->> integer = sum WireConnector.mass + driverHardware.busMass + frontPassengerHardware.busMass
/*
PureElectric2 : PowerWindowSystem
  [driverHardware.dumbSwitch]
  [driverHardware.dumbMotor]
  [no driverHardware.doorModule]
  [no driverFAConfig.express]
  [no driverFAConfig.otherRemoteControl]
  [no BCM]
  [frontPassengerHardware.dumbSwitch]
  [frontPassengerHardware.dumbMotor]
  [no frontPassengerHardware.doorModule]
  [no frontPassengerFAConfig.express]
  [no frontPassengerFAConfig.otherRemoteControl]
  [no frontPassengerHardware.switchRequestJunction]
  [frontPassengerFA.SwitchArbiter.deployedTo.ref = frontPassengerHardware.switch.ref]

//<<min system.quality.numberOfSmartComponents >>
<<min PureElectric.quality.wireLength >>
<<min PureElectric.quality.wireMass >>
*/

system : PowerWindowSystem
  [driverFAConfig.express.expressUp]
  [no driverFAConfig.otherRemoteControl]
  [driverHardware.smartMotor]
  [driverHardware.busType.branchToAllSmartComponents]

  [frontPassengerFAConfig.express]
  [no frontPassengerFAConfig.express.expressUp]
  [no frontPassengerFAConfig.otherRemoteControl]
  [frontPassengerHardware.smartMotor]
  [frontPassengerHardware.busType.branchToAllSmartComponents]
  [no frontPassengerHardware.switchRequestJunction]

  [BCM]
  [no BCM.deployedFrom]

<<min system.quality.numberOfSmartComponents >>
<<min system.quality.wireLength >>
<<min system.quality.wireMass >>